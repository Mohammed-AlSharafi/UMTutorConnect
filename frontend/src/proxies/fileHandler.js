import axiosInstance from "./axiosHandler";

export const resourceTypes = {
  image: [
    "image/jpeg",
    "image/png",
    "image/gif",
    "image/webp",
    // "image/svg+xml",
    "image/bmp",
    // "image/tiff",
    // "image/apng",
    // "image/avif",
    // "image/x-icon",
    "image/heif",
    "image/heic",     // L for apple users
    // "image/ktx",
    // "image/astc",
    // "image/x-ms-bmp",
    // "image/vnd.microsoft.icon",
    // "image/vnd.wap.wbmp",
    // "image/ief"
  ],
  // raw: [
  //   "application/pdf",
  // ]
}
export const allowedFileTypes = Object.values(resourceTypes).flat();

export const getResourceType = (fileType) => {
  for (const [type, allowedTypes] of Object.entries(resourceTypes)) {
    if (allowedTypes.includes(fileType)) {
      console.log("resource type: ", type);
      return type;
    }
  }
  return null;
}

export const getThumbnailUrl = (secureUrl) => {
  const transformation = `c_thumb,g_face,ar_1:1`;

  // Insert transformation after 'upload/'
  const urlParts = secureUrl.split('/upload/');
  return `${urlParts[0]}/upload/${transformation}/${urlParts[1]}`;
}

export const uploadFile = async (fileToUpload, resourceType) => {
  console.log("uploading file: ", fileToUpload);
  console.log("resource type: ", resourceType);

  // ensure resouce type is a valid image type
  if (!allowedFileTypes.includes(fileToUpload.type)) {
    throw new Error("Invalid resource type. Must be 'image'.");
  }

  const allParams = {
    file: fileToUpload,
    timestamp: Math.floor(Date.now() / 1000),
    asset_folder: "umtutorconnect/pfps",
    use_filename: true,
    resource_type: resourceType,   // Note: not needed when using cloudinary upload api directly
  }
  let cloud_name = null;
  const excludedParams = ["file", "resource_type", "api_key", "signature"];

  // get signature and api_key from server
  // the signature is generated by the server exluding certain params
  // https://cloudinary.com/documentation/authentication_signatures
  try {
    const paramsToSign = Object.fromEntries(
      Object.entries(allParams).filter(([key]) => !excludedParams.includes(key))
    )
    console.log("signing params: ", paramsToSign);

    const signatureResponse = await axiosInstance.post("/upload/signature", paramsToSign);
    console.log("received response:", signatureResponse.data);

    const { timestamp, signature, api_key } = signatureResponse.data;
    allParams.timestamp = timestamp;     // add timestamp to allParams
    allParams.signature = signature;     // add signature to allParams
    allParams.api_key = api_key;         // add api_key to allParams

    cloud_name = signatureResponse.data.cloud_name;
  }
  catch (error) {
    if (error.response) {
      // error already handled by interceptor
      // no specific error handling for now
    }
    else {
      console.error(error);
    }
    throw error;
  }

  // upload the file to cloudinary
  try {
    console.log("uploading file with params: ", allParams);

    const formData = new FormData();
    Object.entries(allParams).forEach(([key, value]) => {
      formData.append(key, value);
    });

    const response = await axiosInstance.post(`https://api.cloudinary.com/v1_1/${cloud_name}/${resourceType}/upload`, formData, {
      baseURL: "",    // override baseurl
      headers: {
        "Content-Type": "multipart/formdata",   // set content-type for FormData
      },
    });
    return response.data;
  }
  catch (error) {
    console.error("Failed to upload file to cloudinary:", error.response.data);
    throw error;
  }
};
